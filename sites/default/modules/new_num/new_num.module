<?php
// $Id$

/**
 * @file
 * A module what to create a new number in the site.
*/
function new_num_help($path, $arg) {
  if ($path == 'admin/help#new_num') {
    return t('A module to create a new number in the site.');
  }
}

function new_num_menu() {
  $items = array();

  $items['admin/config/development/new_num'] = array(
    'title' => 'New number',
    'description' => 'New number',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_num_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function new_num_form($form, &$form_state) {
  /*// Number
  $form['bbdd_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Datos de conexión con la base de datos'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['bbdd_data']['new_form-bbdd'] = array(
    '#type' => 'textfield',
    '#title' => t('Nombre de la base de datos'),
    '#size' => 10,
    '#maxlength' => 20,
    '#description' => t('Por su seguridad indique a la base de datos que quiere conectar'),
    '#required' => TRUE,
    '#attributes' => array('autocomplete'=>'off'),
    '#group' => 'bbdd_data',
  );
  // Number
  $form['bbdd_data']['new_form-user'] = array(
    '#type' => 'textfield',
    '#title' => t('Nombre de usuario'),
    '#size' => 10,
    '#maxlength' => 20,
    '#description' => t('Por su seguridad indique el nombre de usuario de la base de datos'),
    '#required' => TRUE,
    '#attributes' => array('autocomplete'=>'off'),
    '#group' => 'bbdd_data',
  );
  // Number
  $form['bbdd_data']['new_form-pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Contraseña de la base de datos'),
    '#size' => 10,
    '#maxlength' => 20,
    '#description' => t('Introduzca la password de la base de datos'),
    '#required' => TRUE,
    '#attributes' => array('autocomplete'=>'off'),
    '#group' => 'bbdd_data',
  );*/
  // Number
  $form['new_form-team'] = array(
    '#type' => 'textfield',
    '#title' => t('New team'),
    '#size' => 10,
    '#maxlength' => 4,
    '#description' => t('the name for the new team'),
    '#required' => TRUE,
  );
  // Submit button 
  $form['submit'] = array( 
    '#type' => 'submit', 
    '#value' => t('Create new number'), 
  );

  return $form;
}

function new_num_form_submit($form, &$form_state) {
  $number = $form_state['values']['new_form-number'];
  $bbdd = $form_state['values']['new_form-bbdd'];
  $user = $form_state['values']['new_form-user'];
  $pass = $form_state['values']['new_form-pass'];
  create_tables($number);
  //insert_data($number);
  create_directory($number);
  create_setting_file($number,$date,$year,$bbdd,$user,$pass);
}

/**
* XX_cache
* XX_cache_bootstrap
* XX_cache_field
* XX_cache_menu
* XX_field_data_body
* XX_field_revision_body
* XX_field_data_field_texto_imprimible
* XX_field_revision_field_texto_imprimible
* XX_node
* XX_node_revision
* XX_field_collection_item
* XX_node_comment_statistics
* XX_search_dataset
* XX_search_index
* XX_search_node_links
* XX_search_total
* XX_variable
*/
function create_tables($number) {
  // Use the Database API to retrieve our data.  // @see http://drupal.org/node/310069
  
  // Caches
  db_query("CREATE TABLE IF NOT EXISTS `".$number."_cache` (
  `cid` varchar(255) NOT NULL DEFAULT '' COMMENT 'Primary Key: Unique cache ID.',
  `data` longblob COMMENT 'A collection of data to cache.',
  `expire` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
  `created` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry was created.',
  `serialized` smallint(6) NOT NULL DEFAULT '0' COMMENT 'A flag to indicate whether content is serialized (1) or not (0).',
  PRIMARY KEY (`cid`),
  KEY `expire` (`expire`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Generic cache table for caching things not separated out...';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_cache_bootstrap` (
  `cid` varchar(255) NOT NULL DEFAULT '' COMMENT 'Primary Key: Unique cache ID.',
  `data` longblob COMMENT 'A collection of data to cache.',
  `expire` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
  `created` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry was created.',
  `serialized` smallint(6) NOT NULL DEFAULT '0' COMMENT 'A flag to indicate whether content is serialized (1) or not (0).',
  PRIMARY KEY (`cid`),
  KEY `expire` (`expire`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Cache table for data required to bootstrap Drupal, may be...';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_cache_field` (
  `cid` varchar(255) NOT NULL DEFAULT '' COMMENT 'Primary Key: Unique cache ID.',
  `data` longblob COMMENT 'A collection of data to cache.',
  `expire` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
  `created` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry was created.',
  `serialized` smallint(6) NOT NULL DEFAULT '0' COMMENT 'A flag to indicate whether content is serialized (1) or not (0).',
  PRIMARY KEY (`cid`),
  KEY `expire` (`expire`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Generic cache table for caching things not separated out...';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_cache_menu` (
  `cid` varchar(255) NOT NULL DEFAULT '' COMMENT 'Primary Key: Unique cache ID.',
  `data` longblob COMMENT 'A collection of data to cache.',
  `expire` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
  `created` int(11) NOT NULL DEFAULT '0' COMMENT 'A Unix timestamp indicating when the cache entry was created.',
  `serialized` smallint(6) NOT NULL DEFAULT '0' COMMENT 'A flag to indicate whether content is serialized (1) or not (0).',
  PRIMARY KEY (`cid`),
  KEY `expire` (`expire`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Cache table for the menu system to store router...';");
  drupal_set_message(t(''));
  
  // Search
  db_query("CREATE TABLE IF NOT EXISTS `".$number."_search_dataset` (
  `sid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Search item ID, e.g. node ID for nodes.',
  `type` varchar(16) NOT NULL COMMENT 'Type of item, e.g. node.',
  `data` longtext NOT NULL COMMENT 'List of space-separated words from the item.',
  `reindex` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Set to force node reindexing.',
  PRIMARY KEY (`sid`,`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Stores items that will be searched.';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_search_index` (
  `word` varchar(50) NOT NULL DEFAULT '' COMMENT 'The ".$number."_search_total.word that is associated with the search item.',
  `sid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'The ".$number."_search_dataset.sid of the searchable item to which the word belongs.',
  `type` varchar(16) NOT NULL COMMENT 'The ".$number."_search_dataset.type of the searchable item to which the word belongs.',
  `score` float DEFAULT NULL COMMENT 'The numeric score of the word, higher being more important.',
  PRIMARY KEY (`word`,`sid`,`type`),
  KEY `sid_type` (`sid`,`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Stores the search index, associating words, items and...';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_search_node_links` (
  `sid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'The ".$number."_search_dataset.sid of the searchable item containing the link to the node.',
  `type` varchar(16) NOT NULL DEFAULT '' COMMENT 'The ".$number."_search_dataset.type of the searchable item containing the link to the node.',
  `nid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'The node.nid that this item links to.',
  `caption` longtext COMMENT 'The text used to link to the node.nid.',
  PRIMARY KEY (`sid`,`type`,`nid`),
  KEY `nid` (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Stores items (like nodes) that link to other nodes, used...';");
  drupal_set_message(t(''));

  db_query("CREATE TABLE IF NOT EXISTS `".$number."_search_total` (
  `word` varchar(50) NOT NULL DEFAULT '' COMMENT 'Primary Key: Unique word in the search index.',
  `count` float DEFAULT NULL COMMENT 'The count of the word in the index using Zipf’s law to equalize the probability distribution.',
  PRIMARY KEY (`word`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Stores search totals for words.';");
  drupal_set_message(t(''));

  // Variables
  db_query("CREATE TABLE IF NOT EXISTS `".$number."_variable` (
  `name` varchar(128) NOT NULL DEFAULT '' COMMENT 'The name of the variable.',
  `value` longblob NOT NULL COMMENT 'The value of the variable.',
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Named variable/value pairs created by Drupal core or any...';");
  drupal_set_message(t(''));

  drupal_set_message(t('Number creates right'));
}

/**
* get the autoincrement values for the specific data base
* XX_field_collection_item
*/
function get_autoincrement($number,$table) {
  $number_before = (int)$number - 1;
  $tblName = $number_before."_".$table;
  $dbName = Database::getConnectionInfo()['default']['database'];
  $query = db_query("SELECT Auto_increment FROM information_schema.tables WHERE table_name='".$tblName."' AND table_schema ='".$dbName."';");
  foreach ($query as $result) {
    $result;
  }
  if(isset($result)){
    $nextId = $result->Auto_increment;
    return $nextId;
  }
  return 0;
}

/**
* --36, 47, 48, 49, 50--
* XX_field_data_body
* XX_field_revision_body
* XX_field_data_field_texto_imprimible
* XX_field_revision_field_texto_imprimible
* XX_node
* XX_node_revision
* --All--
* XX_variable
*/
function get_data($number,$table,$id){
  $query = array();
  $name = str_replace('field_data_', '', $table);

  try {
    foreach ($id as $key => $value) {
      $number_before = (int)$number - 1;
      $nmTable = $number_before.'_'.$table;
      $query = db_select( $nmTable , 'n')
        ->fields('n', array($name.'_value'))
        ->condition('entity_id', $value )
        ->execute();

        foreach ($query as $value) {
          $prop = $name.'_value';
          $results[] = str_replace('\'', '\\\'', $value->$prop);
        }
    }
  }catch(Exception $e) { 
      drupal_set_message(t('An error occurred and processing did not complete in select '.$table.'.'), 'error'); 
      $results = false;
  }
  return $results;
}

function insert_data($number) {

}

/**
* Create folder, setting file and symlink
*/
function create_directory($number) {
  global $base_url;
  $dom = str_replace('http://','',$base_url);
  $directory = $_SERVER['DOCUMENT_ROOT'].'/sites/'.$dom.'.'.$number;
  $perm = 0755;
  
  if(!mkdir ( $directory , $perm , true ))
  {
      drupal_set_message(t('Fallo al crear carpetas...'),'error');
  }

  symlink ( '.' , $number );
}

function create_setting_file($number,$date,$year,$bbdd,$user,$pass){
  $path_module = drupal_get_path('module', 'new_num');
  $fichero = $path_module.'/settings.tpl.php';
  
  if (file_exists ($fichero)){
    global $base_url;
    $dom = str_replace('http://','',$base_url);
    //Intentamos abrir el fichero.
    if ($ficheroabierto = fopen ($fichero, "r")){
      $contenido_fichero = fread($ficheroabierto, filesize($fichero));
      $contenido_fichero = str_replace('##NUMBER##', $number , $contenido_fichero );
      $contenido_fichero = str_replace('##BBDD##', $bbdd , $contenido_fichero );
      $contenido_fichero = str_replace('##USERNAME##', $user , $contenido_fichero );
      $contenido_fichero = str_replace('##PASS##', $pass , $contenido_fichero );
      fclose($ficheroabierto);
    } else {
     drupal_set_message(t('El fichero no ha podido ser abierto'),'error');
    }
  } else {
    drupal_set_message(t('El fichero no existe'),'error');
  }
  $fichero = $_SERVER['DOCUMENT_ROOT'].'/sites/'.$dom.'.'.$number.'/settings.php';
  $setting = fopen($fichero, 'w');
  fwrite($setting, $contenido_fichero);
  fclose($setting);
  chmod($setting, 755);

}